<?php
/**
 * CPT Export XML Generator Class
 * 
 * Handles XML generation for WordPress export format
 * 
 * @package CPT_Export
 * @version 1.0.97
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

class CPT_Export_XML_Generator
{
    public function generate_xml($posts, $attachments, $post_type_slug)
    {
        global $wpdb;
        ob_start();

        echo '<?xml version="1.0" encoding="' . esc_attr(get_bloginfo('charset')) . "\" ?>\n";
        ?>
        <!-- This is a WordPress eXtended RSS file generated by CPT Export as an export of your site. -->
        <!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
        <!-- You may use this file to transfer that content from one site to another. -->
        <!-- This file is not intended to serve as a complete backup of your site. -->

        <rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
            xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/"
            xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
            <channel>
                <title><?php echo esc_html(get_bloginfo('name')); ?></title>
                <link><?php echo esc_url(get_bloginfo('url')); ?></link>
                <description><?php echo esc_html(get_bloginfo('description')); ?></description>
                <pubDate><?php echo esc_html(gmdate('D, d M Y H:i:s +0000')); ?></pubDate>
                <language><?php echo esc_html(get_option('rss_language', get_bloginfo('language'))); ?></language>
                <wp:wxr_version>1.2</wp:wxr_version>
                <wp:base_site_url><?php echo esc_url(get_option('siteurl')); ?></wp:base_site_url>
                <wp:base_blog_url><?php echo esc_url(get_option('home')); ?></wp:base_blog_url>
                <?php
                $author_ids = array();
                if (!empty($posts))
                    foreach ($posts as $p)
                        $author_ids[] = (int) $p->post_author;
                if (!empty($attachments))
                    foreach ($attachments as $a)
                        $author_ids[] = (int) $a->post_author;
                $author_ids = array_unique(array_filter($author_ids));
                foreach ($author_ids as $author_id) {
                    $author = get_userdata($author_id);
                    if ($author) {
                        ?>
                        <wp:author>
                            <wp:author_id><?php echo intval($author->ID); ?></wp:author_id>
                            <wp:author_login><?php echo $this->wxr_cdata($author->user_login); ?></wp:author_login>
                            <wp:author_email><?php echo $this->wxr_cdata($author->user_email); ?></wp:author_email>
                            <wp:author_display_name><?php echo $this->wxr_cdata($author->display_name); ?></wp:author_display_name>
                            <wp:author_first_name><?php echo $this->wxr_cdata($author->first_name); ?></wp:author_first_name>
                            <wp:author_last_name><?php echo $this->wxr_cdata($author->last_name); ?></wp:author_last_name>
                        </wp:author>
                        <?php
                    }
                }

                $term_ids = array();
                $all_posts_for_terms = array_merge($posts, $attachments);
                foreach ($all_posts_for_terms as $p) {
                    if (!$p instanceof WP_Post)
                        continue;
                    $post_taxonomies = get_object_taxonomies($p->post_type, 'objects');
                    foreach ($post_taxonomies as $taxonomy) {
                        if (!$taxonomy->public && !$taxonomy->publicly_queryable && !current_user_can($taxonomy->cap->assign_terms)) {
                            continue; // Skip non-public taxonomies unless user has rights
                        }
                        $post_terms = wp_get_object_terms($p->ID, $taxonomy->name, array('fields' => 'ids'));
                        if (!is_wp_error($post_terms) && !empty($post_terms)) {
                            $term_ids = array_merge($term_ids, $post_terms);
                        }
                    }
                }
                $term_ids = array_unique(array_map('intval', $term_ids));
                foreach ($term_ids as $term_id) {
                    $term = get_term($term_id);
                    if ($term && !is_wp_error($term)) {
                        ?>
                        <wp:term>
                            <wp:term_id><?php echo intval($term->term_id); ?></wp:term_id>
                            <wp:term_taxonomy><?php echo $this->wxr_cdata($term->taxonomy); ?></wp:term_taxonomy>
                            <wp:term_slug><?php echo $this->wxr_cdata($term->slug); ?></wp:term_slug>
                            <?php $parent_term = $term->parent ? get_term($term->parent, $term->taxonomy) : false; ?>
                            <wp:term_parent>
                                <?php echo $this->wxr_cdata($parent_term && !is_wp_error($parent_term) ? $parent_term->slug : ''); ?>
                            </wp:term_parent>
                            <wp:term_name><?php echo $this->wxr_cdata($term->name); ?></wp:term_name>
                            <?php if (!empty($term->description)): ?>
                                <wp:term_description><?php echo $this->wxr_cdata($term->description); ?></wp:term_description>
                            <?php endif; ?>
                        </wp:term>
                        <?php
                    }
                }

                do_action('rss2_head');

                if (!empty($attachments)) {
                    foreach ($attachments as $attachment_post) {
                        if ($attachment_post instanceof WP_Post)
                            $this->generate_post_xml($attachment_post);
                    }
                }
                if (!empty($posts)) {
                    foreach ($posts as $main_post) {
                        if ($main_post instanceof WP_Post)
                            $this->generate_post_xml($main_post);
                    }
                }
                ?>
            </channel>
        </rss>
        <?php
        $xml = ob_get_contents();
        ob_end_clean();
        return $xml;
    }

    private function generate_post_xml($post_obj)
    {
        global $wpdb;
        ?>
        <item>
            <title><?php echo $this->wxr_cdata($post_obj->post_title); ?></title>
            <link><?php echo esc_url(get_permalink($post_obj->ID)); ?></link>
            <pubDate><?php echo esc_html(mysql2date('D, d M Y H:i:s +0000', $post_obj->post_date_gmt, false)); ?></pubDate>
            <dc:creator><?php echo $this->wxr_cdata(get_the_author_meta('user_login', $post_obj->post_author)); ?></dc:creator>
            <guid isPermaLink="false"><?php echo esc_url(get_the_guid($post_obj->ID)); ?></guid>
            <description><?php echo $this->wxr_cdata($post_obj->post_excerpt); ?></description>
            <content:encoded><?php echo $this->wxr_cdata($post_obj->post_content); ?></content:encoded>
            <excerpt:encoded><?php echo $this->wxr_cdata($post_obj->post_excerpt); ?></excerpt:encoded>
            <wp:post_id><?php echo intval($post_obj->ID); ?></wp:post_id>
            <wp:post_date><?php echo $this->wxr_cdata($post_obj->post_date); ?></wp:post_date>
            <wp:post_date_gmt><?php echo $this->wxr_cdata($post_obj->post_date_gmt); ?></wp:post_date_gmt>
            <wp:comment_status><?php echo $this->wxr_cdata($post_obj->comment_status); ?></wp:comment_status>
            <wp:ping_status><?php echo $this->wxr_cdata($post_obj->ping_status); ?></wp:ping_status>
            <wp:post_name><?php echo $this->wxr_cdata($post_obj->post_name); ?></wp:post_name>
            <wp:status><?php echo $this->wxr_cdata($post_obj->post_status); ?></wp:status>
            <wp:post_parent><?php echo intval($post_obj->post_parent); ?></wp:post_parent>
            <wp:menu_order><?php echo intval($post_obj->menu_order); ?></wp:menu_order>
            <wp:post_type><?php echo $this->wxr_cdata($post_obj->post_type); ?></wp:post_type>
            <wp:post_password><?php echo $this->wxr_cdata($post_obj->post_password); ?></wp:post_password>
            <wp:is_sticky><?php echo intval($post_obj->post_type === 'post' && is_sticky($post_obj->ID)); ?></wp:is_sticky>
            <?php if ($post_obj->post_type === 'attachment'): ?>
                <wp:attachment_url><?php echo $this->wxr_cdata(wp_get_attachment_url($post_obj->ID)); ?></wp:attachment_url>
            <?php endif; ?>
            <?php
            $postmeta = $wpdb->get_results($wpdb->prepare("SELECT meta_key, meta_value FROM $wpdb->postmeta WHERE post_id = %d", $post_obj->ID));
            if ($postmeta) {
                foreach ($postmeta as $meta):
                    if (apply_filters('wxr_export_skip_postmeta', false, $meta->meta_key, $meta, $post_obj))
                        continue;
                    ?>
                    <wp:postmeta>
                        <wp:meta_key><?php echo $this->wxr_cdata($meta->meta_key); ?></wp:meta_key>
                        <wp:meta_value><?php echo $this->wxr_cdata($meta->meta_value); ?></wp:meta_value>
                    </wp:postmeta>
                <?php endforeach;
            } ?>
            <?php
            $taxonomies = get_object_taxonomies($post_obj->post_type, 'objects');
            if (!empty($taxonomies)) {
                foreach ($taxonomies as $taxonomy_slug => $taxonomy_obj) {
                    if (!$taxonomy_obj->public && !$taxonomy_obj->publicly_queryable && !current_user_can($taxonomy_obj->cap->assign_terms)) {
                        continue;
                    }
                    $terms = get_the_terms($post_obj->ID, $taxonomy_slug);
                    if (!empty($terms) && !is_wp_error($terms)) {
                        foreach ($terms as $term) {
                            ?>
                            <category domain="<?php echo esc_attr($taxonomy_slug); ?>" nicename="<?php echo esc_attr($term->slug); ?>">
                                <?php echo $this->wxr_cdata($term->name); ?>
                            </category>
                            <?php
                        }
                    }
                }
            }
            ?>
            <?php
            $comments = get_comments(array('post_id' => $post_obj->ID, 'status' => 'approve', 'order' => 'ASC', 'type__not_in' => 'trackback, pingback'));
            if ($comments) {
                foreach ($comments as $comment):
                    ?>
                    <wp:comment>
                        <wp:comment_id><?php echo intval($comment->comment_ID); ?></wp:comment_id>
                        <wp:comment_author><?php echo $this->wxr_cdata($comment->comment_author); ?></wp:comment_author>
                        <wp:comment_author_email><?php echo $this->wxr_cdata($comment->comment_author_email); ?>
                        </wp:comment_author_email>
                        <wp:comment_author_url><?php echo esc_url_raw($comment->comment_author_url); ?></wp:comment_author_url>
                        <wp:comment_author_IP><?php echo $this->wxr_cdata($comment->comment_author_IP); ?></wp:comment_author_IP>
                        <wp:comment_date><?php echo $this->wxr_cdata($comment->comment_date); ?></wp:comment_date>
                        <wp:comment_date_gmt><?php echo $this->wxr_cdata($comment->comment_date_gmt); ?></wp:comment_date_gmt>
                        <wp:comment_content><?php echo $this->wxr_cdata($comment->comment_content); ?></wp:comment_content>
                        <wp:comment_approved><?php echo $this->wxr_cdata($comment->comment_approved); ?></wp:comment_approved>
                        <wp:comment_type><?php echo $this->wxr_cdata($comment->comment_type); ?></wp:comment_type>
                        <wp:comment_parent><?php echo intval($comment->comment_parent); ?></wp:comment_parent>
                        <wp:comment_user_id><?php echo intval($comment->user_id); ?></wp:comment_user_id>
                        <?php
                        $commentmeta = get_comment_meta($comment->comment_ID);
                        if ($commentmeta) {
                            foreach ($commentmeta as $meta_key => $meta_values) {
                                foreach ($meta_values as $meta_value):
                                    ?>
                                    <wp:commentmeta>
                                        <wp:meta_key><?php echo $this->wxr_cdata($meta_key); ?></wp:meta_key>
                                        <wp:meta_value><?php echo $this->wxr_cdata($meta_value); ?></wp:meta_value>
                                    </wp:commentmeta>
                                <?php endforeach;
                            }
                        } ?>
                    </wp:comment>
                <?php endforeach;
            } ?>
        </item>
        <?php
    }

    private function wxr_cdata($str)
    {
        if (null === $str)
            $str = ''; // Ensure string type
        if (!seems_utf8($str)) {
            // PHP 8.2 compatible UTF-8 encoding with proper encoding detection
            if (function_exists('mb_convert_encoding')) {
                // Detect the current encoding first
                $detected_encoding = mb_detect_encoding($str, ['UTF-8', 'ISO-8859-1', 'Windows-1252', 'ASCII'], true);
                if ($detected_encoding && $detected_encoding !== 'UTF-8') {
                    $str = mb_convert_encoding($str, 'UTF-8', $detected_encoding);
                } else {
                    // Fallback to ISO-8859-1 if detection fails
                    $str = mb_convert_encoding($str, 'UTF-8', 'ISO-8859-1');
                }
            } elseif (function_exists('iconv')) {
                // Try to detect encoding for iconv
                if (function_exists('mb_detect_encoding')) {
                    $detected_encoding = mb_detect_encoding($str, ['UTF-8', 'ISO-8859-1', 'Windows-1252', 'ASCII'], true);
                    $from_encoding = $detected_encoding ?: 'ISO-8859-1';
                } else {
                    $from_encoding = 'ISO-8859-1';
                }
                $str = iconv($from_encoding, 'UTF-8//IGNORE', $str);
            } else {
                if (function_exists('mb_convert_encoding')) {
                    $str = mb_convert_encoding($str, 'UTF-8', 'ISO-8859-1');
                } else {
                    // PHP 8.2+ compatible fallback using manual encoding or a polyfill
                    $str = $this->manual_utf8_encode($str);
                }
                /*
                // Fallback for older PHP versions or if extensions are missing
                if (function_exists('utf8_encode') && version_compare(PHP_VERSION, '8.2', '<')) {
                    $str = utf8_encode($str);
                } else {
                    // PHP 8.2+ compatible fallback using manual encoding
                    $str = $this->manual_utf8_encode($str);
                }*/
            }
        }
        $str = '<![CDATA[' . str_replace(']]>', ']]]]><![CDATA[>', $str) . ']]>';
        return $str;
    }

    /**
     * Manual UTF-8 encoding fallback for PHP 8.2+ compatibility
     * Converts ISO-8859-1 (Latin-1) to UTF-8 manually
     * 
     * @param string $str Input string in ISO-8859-1 encoding
     * @return string UTF-8 encoded string
     */
    private function manual_utf8_encode($str)
    {
        if (empty($str)) {
            return $str;
        }

        $utf8_string = '';
        $len = strlen($str);

        for ($i = 0; $i < $len; $i++) {
            $byte = ord($str[$i]);

            if ($byte < 0x80) {
                // ASCII characters (0-127) remain unchanged
                $utf8_string .= chr($byte);
            } else {
                // Convert extended ASCII (128-255) to UTF-8
                // For ISO-8859-1, this is a simple two-byte UTF-8 encoding
                $utf8_string .= chr(0xC0 | ($byte >> 6));
                $utf8_string .= chr(0x80 | ($byte & 0x3F));
            }
        }

        return $utf8_string;
    }
}